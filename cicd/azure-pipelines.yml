# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

variables:
  vmImage: 'ubuntu-latest'
  dockerfilePath: '$(Build.SourcesDirectory)/docker/Dockerfile'
  dockerComposePath: '$(Build.SourcesDirectory)/docker/docker-compose.yml'
  dockerHubRegistryServiceConnection : 'dockerHub'
  repositoryName: 'texyp/paymentGateway'

jobs:
  - job: CalcuateAndSetBuildVersion
    displayName: "Calculate Semver and set build version"
    pool:
      vmImage: $(vmImage)

    steps:
      - task: GitVersion@5
        displayName: 'Calculate SemVer'
        inputs:
          runtime: 'core'
          updateAssemblyInfo: true

      - script: echo '##vso[task.setvariable variable=buildVersion]$(GitVersion.SemVer)'
        displayName: "Set buildVersion"

  - job: BuildApi
    dependsOn: [CalcuateAndSetBuildVersion]
    displayName: "Build Payment Gateway api and Run Tests"
    pool:
      vmImage: $(vmImage)
    variables:
      buildVersion: $[ dependencies.CalcuateAndSetBuildVersion.outputs['setVersion.buildVersion'] ]
    steps:
    - task: Docker@2
      displayName: Build Docker Image
      inputs:
        command: build
        dockerfile: $(dockerfilePath)
        repository: $(repositoryName)
        buildContext: $(Build.SourcesDirectory)
        tags: |
          $(buildVersion)

    - task: Docker@2
      displayName: Push image to container registry
      inputs:
        command: push
        dockerfile: $(dockerfilePath)
        repository: $(repositoryName)
        buildContext: $(Build.SourcesDirectory)
        containerRegistry: $(dockerHubRegistryServiceConnection)
        tags: |
          $(buildVersion)
        
    - script: dotnet test tests/PaymentGateway.UnitTests 
      displayName: Run Unit Tests

    - task: DockerCompose@0
      displayName: 'docker-compose down'
      condition: always()
      inputs:
        containerregistrytype: 'Container Registry'
        dockerComposeFile: $(dockerComposePath)
        action: 'Run a Docker Compose command'
        dockerComposeCommand: 'down --remove-orphans'
      
    - task: DockerCompose@0
      displayName: 'docker-compose up'
      inputs:
        containerregistrytype: 'Container Registry'
        dockerComposeFile: $(dockerComposePath)
        action: 'Run a Docker Compose command'
        dockerComposeCommand: 'up -d --build'

    - script: dotnet test tests/PaymentGateway.IntegrationTests
      displayName: Run Integration Tests

    - task: DockerCompose@0
      displayName: 'docker-compose down'
      condition: always()
      inputs:
        containerregistrytype: 'Container Registry'
        dockerComposeFile: $(dockerComposePath)
        action: 'Run a Docker Compose command'
        dockerComposeCommand: 'down'

